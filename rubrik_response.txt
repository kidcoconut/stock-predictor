>>>  Interview Readiness
Q1:	What does it mean to create a Docker image and why do we use Docker images?
A1:  	To create a Docker image is a file that acts as a template for configuring, initializing, and running a Docker container.

The Docker image is defined through a Docker file, which itself acts as a recipe of instructions for creating a Docker image.

Once created, Docker image acts as a snapshot of the system, library, tools, files, application code, configurations and network dependencies required to execute the target container.  They are immutable, which is of great value in environments/projects sensitive to unmanaged change.

A Docker image is designed for reusability and can therefore act as a template for the creation of other Docker images as well.

Docker images are reusable assets and are utilized for numerous reasons, including:  the standardization, version control, consistency, security, and reliability of each staging environment (eg dev, qa, uat, prod, and support) across the entire project lifecycle.   Docker images also lend themselves to high portability, persistence, backup, restoration, and automation.  In many cases, they are created, destroyed, and recreated with great ease and flexibility.  This creates additional benefits by reducing any unnecessary use of resources. 



Q2:	Please explain what is the difference from a Container vs a Virtual Machine?
A2:	There are several differences between a Container and a Virtual Machine
	- Virtual Machines (VMs) are designed to share common hypervisor, ie virtualized hardware.  It is an environment that includes a fully functional Guest OS and file system.  The cpu, network, memory and disk is emulated and is virtualized through the hypervisor layer that sits above the physical host hardware.  Each VM can run a uniquely different OS and environment, as long as the underlying hypervisor and hardware can support it.  VMs are considered more heavy-weight (bloated), resource-hungry, and operationally intensive.  This causes them to be relatively less portable than containers, and relatively more expensive.  VMs can be typically several GBs in size, and takes minutes to start up, similar to booting a laptop, or desktop.  The benefits of VMs include:  the ability for apps to have access to all OS resources;  mature and well estabished management and security tools; the flexibility to run several OSes on a single physical machine; and visible cost savings compared to traditional non-virtualized, seperate physical hosts.

	- Containers are designed to share a common Host OS, OS kernel, and all associated binaries and libraries, ie virtualized OS.  This level of abstraction allows each Container itself to be relatively light compared to VMs.  Containers can be typically several 100MBs in size, and take less than a minute to launch.  This causes them to be more portable, more performant, and more easily manageable.  The additional benefits of Containers include more economic scalability (horizontal and vertical), reduced and simplified security and management updates.



Q3:	What are 5 examples of container orchestration tools (please list tools)?
A3:	Enterprises require the ability to deploy and manage hundreds and in some cases thousands of containers.  Container orchestration automates the provisioning, deployment, configuration, scheduling, resource allocation, management, scaling, load balancing, traffic routing, monitoring, networking, and security of multiple containers.

	Container orchestration tools include:
	1. Kubernetes:  	originally developed by Google and open sourced;  well suited to the orchestration of Linux containers 
	2. Openshift:	Opensource, maintained by RedHat, and built on top of Kubernetes
	3. Docker Swarm:  well suited to orchestration of Docker containers
	4. Rancher:	supports management of hybrid Kubernetes clusters:  Google GKE, Amazon EKS, and VMWare vSphere RKE
	5. Apache Mesos: originally developed by Twitter for infrastructure management and then open sourced.  Mesos is not a dedicated tool for container clusters;  it can also manage VM or physcial machine clustering.


	6. (other not so popular or well known orchestrator) Azure Service Fabric _was_ Microsoft's container orchestrator well-suited for at-scale stateless or stateful microservices implementations across clusters of machines.
	


Q4:	How does a Docker image differ from a Docker container?
A4:	Docker images differ from Docker containers in several ways.  For example:
	- Each Docker Container is instanced and run from a single Docker image.
	- Each Docker Image can instance and run multiple Docker Containers
	- Docker Images are designed for portability, and immutability (read-only, unchangable).  
	- Docker Containers are designed to be created and destroyed;  they can be modified during runtime
